definitions:
  controllers.CreateStockRequest:
    properties:
      price:
        example: 150.25
        type: number
      ticker:
        example: AAPL
        type: string
    type: object
  controllers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  controllers.LoginCredentials:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  controllers.LoginResponse:
    properties:
      token:
        type: string
    type: object
  controllers.SignupResponse:
    properties:
      message:
        type: string
      token:
        type: string
    type: object
  controllers.Stock:
    properties:
      id:
        type: integer
      price:
        type: number
      ticker:
        type: string
    required:
    - price
    - ticker
    type: object
  controllers.SuccessResponse:
    properties:
      message:
        type: string
      token:
        type: string
    type: object
  controllers.Transaction:
    properties:
      id:
        type: integer
      ticker:
        type: string
      timestamp:
        type: string
      transaction_price:
        type: number
      transaction_type:
        type: string
      transaction_volume:
        type: integer
      user_id:
        type: integer
    type: object
  controllers.TransactionRequest:
    properties:
      ticker:
        example: tia
        type: string
      transaction_type:
        example: BUY
        type: string
      transaction_volume:
        example: 10
        type: integer
      username:
        example: abdullah
        type: string
    type: object
  controllers.User:
    properties:
      balance:
        type: number
      id:
        type: integer
      username:
        type: string
    type: object
  controllers.UserRequest:
    properties:
      initial_balance:
        example: 1000
        type: number
      username:
        example: abdullah
        type: string
    type: object
  models.A_user:
    properties:
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      username:
        type: string
    type: object
info:
  contact:
    email: abdullahkpr22@gmail.com
    name: abdullah
  description: This is the API documentation for the Stock Exchange project
  title: Stock Exchange API
paths:
  /api/stocks:
    get:
      consumes:
      - application/json
      description: Retrieves all stock entries from the database.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.Stock'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Retrieve all stocks
      tags:
      - Stock
    post:
      consumes:
      - application/json
      description: Saves new stock data into the database.
      parameters:
      - description: Stock data
        in: body
        name: stock
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateStockRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new stock entry
      tags:
      - Stock
  /api/stocks/{ticker}:
    get:
      consumes:
      - application/json
      description: Retrieves stock details based on the provided ticker symbol.
      parameters:
      - description: Stock Ticker
        in: path
        name: ticker
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Stock'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Retrieve stock by ticker
      tags:
      - Stock
  /api/transactions:
    post:
      consumes:
      - application/json
      description: Creates a new transaction record in the system.
      parameters:
      - description: Transaction data
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/controllers.TransactionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new transaction
      tags:
      - Transaction
  /api/transactions/{username}:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all transactions for a given user.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.Transaction'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all Transactions for a user
      tags:
      - Transaction
  /api/transactions/{username}/{start_time}/{end_time}:
    get:
      consumes:
      - application/json
      description: Retrieves transactions for a specific user within a given time
        range.
      parameters:
      - description: Username of the user
        in: path
        name: username
        required: true
        type: string
      - description: Start timestamp in YYYY-MM-DD format
        format: date
        in: path
        name: start_time
        required: true
        type: string
      - description: End timestamp in YYYY-MM-DD format
        format: date
        in: path
        name: end_time
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.Transaction'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Transactions for a user by timestamp
      tags:
      - Transaction
  /api/users:
    post:
      consumes:
      - application/json
      description: Saves new user data into the database.
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.UserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - User
  /api/users/{username}:
    get:
      consumes:
      - application/json
      description: Retrieves user details based on the provided username.
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: get user by username
      tags:
      - User
  /user/authenticated:
    get:
      consumes:
      - application/json
      description: Validate the JWT token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Check if user is authenticated
      tags:
      - auth_user
  /user/login:
    post:
      consumes:
      - application/json
      description: Login with username and password
      parameters:
      - description: Login credentials
        in: body
        name: creds
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Login user
      tags:
      - auth_user
  /user/register:
    post:
      consumes:
      - application/json
      description: Add a new user
      parameters:
      - description: A_user Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.A_user'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.SignupResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Register auth-user
      tags:
      - auth_user
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
